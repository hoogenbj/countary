create table account ( id INTEGER primary key, name TEXT not null, number TEXT, branchCode TEXT, bank TEXT, tagColor TEXT );
create unique index account_name_uindex on account (name);
create virtual table account_idx using fts5(    id,    name,    number,    branchCode,    bank,    content=account,    content_rowid=id,    prefix='1 2 3');
CREATE TRIGGER account_ad AFTER DELETE ON "account" BEGIN INSERT INTO account_idx(account_idx, rowid, name, number, branchCode, bank) VALUES ('delete', old.id, old.name, old.number, old.branchCode, old.bank);END;
CREATE TRIGGER account_ai AFTER INSERT ON "account" BEGIN INSERT INTO account_idx(rowid, name, number, branchCode, bank) VALUES (new.id, new.name, new.number, new.branchCode, new.bank);END;
CREATE TRIGGER account_au AFTER UPDATE ON "account" BEGIN INSERT INTO account_idx(account_idx, rowid, name, number, branchCode, bank) VALUES ('delete', old.id, old.name, old.number, old.branchCode, old.bank); INSERT INTO account_idx(rowid, name, number, branchCode, bank) VALUES (new.id, new.name, new.number, new.branchCode, new.bank); END;
create table budget ( id INTEGER primary key, name TEXT not null, kind TEXT not null, copyBudgetId integer constraint budget_budget_id_fk references budget, hidden INTEGER default 0 );
create unique index budget_name_uindex on budget (name);
CREATE TRIGGER budget_ad AFTER DELETE ON "budget" BEGIN INSERT INTO budget_idx(budget_idx, rowid, name, kind, copyBudgetId) VALUES('delete', old.id, old.name, old.kind, old.copyBudgetId); END; 
CREATE TRIGGER budget_ai AFTER INSERT ON "budget" BEGIN INSERT INTO budget_idx(rowid, name, kind, copyBudgetId) VALUES (new.id, new.name, new.kind, new.copyBudgetId); END;
CREATE TRIGGER budget_au AFTER UPDATE ON "budget" BEGIN INSERT INTO budget_idx(budget_idx, rowid, name, kind, copyBudgetId) VALUES('delete', old.id, old.name, old.kind, old.copyBudgetId); INSERT INTO budget_idx(rowid, name, kind, copyBudgetId) VALUES (new.id, new.name, new.kind, new.copyBudgetId); END; 
create table item ( id INTEGER primary key, name TEXT not null , kind TEXT not null, categoryId references category not null ); 
create table budget_item ( id INTEGER primary key, budgetId INTEGER references budget not null , itemId INTEGER references item not null , planned NUMERIC, note TEXT ); 
create unique index budget_item_budgetId_budgetId_uindex on budget_item (budgetId, itemId); 
create unique index item_name_uindex on item (name, kind); 
CREATE TRIGGER item_ad AFTER DELETE ON "item" BEGIN INSERT INTO item_idx(item_idx, rowid, name, kind, categoryId) VALUES('delete', old.id, old.name, old.kind, old.categoryId); END; 
CREATE TRIGGER item_ai AFTER INSERT ON "item" BEGIN INSERT INTO item_idx(rowid, name, kind, categoryId) VALUES (new.id, new.name, new.kind, new.categoryId); END; 
CREATE TRIGGER item_au AFTER UPDATE ON "item" BEGIN INSERT INTO item_idx(item_idx, rowid, name, kind, categoryId) VALUES('delete', old.id, old.name, old.kind, old.categoryId); INSERT INTO item_idx(rowid, name, kind, categoryId) VALUES (new.id, new.name, new.kind, new.categoryId); END; 
create table category ( id INTEGER primary key, name TEXT not null, kind TEXT not null, bgColor TEXT not null, parentId INTEGER references category ); create unique index category_kind_name_uindex on category (kind, name);
create table tag ( id INTEGER primary key, name TEXT ); 
create table item_tag ( id integer constraint item_tag_pk primary key, itemId integer constraint item_tag_item_id_fk references item, tagId integer constraint item_tag_tag_id_fk references tag ); 
create unique index item_tag_itemId_tagId_uindex on item_tag (itemId, tagId); 
create unique index tag_name_uindex on tag (name); 
CREATE TRIGGER tag_ad AFTER DELETE ON tag BEGIN INSERT INTO tag_idx(tag_idx, rowid, name) VALUES ('delete', old.id, old.name); END; 
CREATE TRIGGER tag_ai AFTER INSERT ON tag BEGIN INSERT INTO tag_idx(rowid, name) VALUES (new.id, new.name); END; 
CREATE TRIGGER tag_au AFTER UPDATE ON tag BEGIN INSERT INTO tag_idx(tag_idx, rowid, name) VALUES ('delete', old.id, old.name); INSERT INTO tag_idx(rowid, name) VALUES (new.id, new.name); END; 
create table transactions ( id INTEGER primary key, accountId INTEGER references account on delete cascade, txdate INTEGER, amount NUMERIC, balance NUMERIC, description TEXT, hash TEXT, allocated integer default 0, posting_date integer not null, manual integer default 0 ); 
create table allocation ( id integer not null constraint allocation_pk primary key autoincrement, transactionId integer not null constraint allocation_transactions_id_fk references transactions, budgetItemId integer not null constraint allocation_budget_item_id_fk references budget_item, amount numeric not null, note TEXT ); 
create unique index allocation_id_uindex on allocation (id); 
create unique index allocation_transactionId_budgetItemId_uindex on allocation (transactionId, budgetItemId); 
create index transactions_hash_index on transactions (hash); 
CREATE TRIGGER transactions_ad AFTER DELETE ON transactions BEGIN INSERT INTO transactions_idx(transactions_idx, rowid, accountId, txdate, amount, balance, description, posting_date, allocated, manual) VALUES('delete', old.id, old.accountId, old.txdate, old.amount, old.balance, old.description, old.posting_date, old.allocated, old.manual); END; 
CREATE TRIGGER transactions_ai AFTER INSERT ON transactions BEGIN INSERT INTO transactions_idx(rowid, accountId, txdate, amount, balance, description, posting_date, allocated, manual) VALUES (new.id, new.accountId, new.txdate, new.amount, new.balance, new.description, new.posting_date, new.allocated, new.manual); END; 
CREATE TRIGGER transactions_au AFTER UPDATE ON transactions BEGIN INSERT INTO transactions_idx(transactions_idx, rowid, accountId, txdate, amount, balance, description, posting_date, allocated, manual) VALUES('delete', old.id, old.accountId, old.txdate, old.amount, old.balance, old.description, old.posting_date, old.allocated, old.manual); INSERT INTO transactions_idx(rowid, accountId, txdate, amount, balance, description, posting_date, allocated, manual) VALUES (new.id, new.accountId, new.txdate, new.amount, new.balance, new.description, new.posting_date, new.allocated, new.manual); END; 
create virtual table budget_idx using fts5 ( id, name, kind, copyBudgetId, content=budget, content_rowid=id, prefix='1 2 3' ); 
create virtual table item_idx using fts5 ( id, name, kind, categoryId, content=item, content_rowid=id, prefix='1 2 3' ); 
create virtual table tag_idx using fts5 ( id, name, content=tag, content_rowid=id, prefix='1 2 3' ); 
create virtual table transactions_idx using fts5 ( id, accountId, txdate, amount, balance, description, posting_date, allocated, manual, content=transactions, content_rowid=id, prefix='1 2 3' ); 
